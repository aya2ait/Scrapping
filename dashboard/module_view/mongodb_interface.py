import streamlit as st
import pandas as pd
import requests
import json
from datetime import datetime
import io
from typing import Dict, Any

def show_page():
    """
    Page Streamlit pour l'import de CSV vers MongoDB
    """
    st.title("üìä Import CSV vers MongoDB")
    st.markdown("---")
    
    # Configuration de l'API
    st.sidebar.header("üîß Configuration API")
    api_base_url = st.sidebar.text_input(
        "URL de base de l'API",
        value="http://localhost:8000",
        help="URL de votre API FastAPI"
    )
    
    # Configuration MongoDB
    st.header("üóÑÔ∏è Configuration MongoDB")
    
    col1, col2 = st.columns(2)
    
    with col1:
        connection_string = st.text_input(
            "URI de connexion MongoDB",
            value="mongodb://localhost:27017/",
            help="URI de connexion √† votre base MongoDB"
        )
        database_name = st.text_input(
            "Nom de la base de donn√©es",
            value="products_db",
            help="Nom de la base de donn√©es MongoDB"
        )
    
    with col2:
        collection_name = st.text_input(
            "Nom de la collection",
            value="products",
            help="Nom de la collection MongoDB"
        )
    
    # Test de connexion MongoDB
    st.subheader("üîç Test de connexion")
    
    if st.button("üîó Tester la connexion MongoDB", type="secondary"):
        with st.spinner("Test de connexion en cours..."):
            try:
                health_data = {
                    "connection_string": connection_string,
                    "database_name": database_name,
                    "collection_name": collection_name
                }
                
                response = requests.post(
                    f"{api_base_url}/mongodb/health",
                    json=health_data,
                    timeout=10
                )
                
                if response.status_code == 200:
                    result = response.json()
                    st.success("‚úÖ Connexion MongoDB r√©ussie!")
                    
                    # Afficher les d√©tails de la connexion
                    st.json(result)
                else:
                    st.error(f"‚ùå Erreur de connexion: {response.status_code}")
                    st.error(response.text)
                    
            except requests.exceptions.RequestException as e:
                st.error(f"‚ùå Erreur de requ√™te: {str(e)}")
            except Exception as e:
                st.error(f"‚ùå Erreur inattendue: {str(e)}")
    
    st.markdown("---")
    
    # Section de gestion des fichiers CSV
    st.header("üìÅ Gestion des fichiers CSV")
    
    # Onglets pour les diff√©rentes fonctionnalit√©s
    tab1, tab2, tab3 = st.tabs(["üì§ Import CSV", "üîç Validation CSV", "üìã Template CSV"])
    
    # TAB 1: Import CSV
    with tab1:
        st.subheader("üì§ Importer un fichier CSV")
        
        uploaded_file = st.file_uploader(
            "Choisissez un fichier CSV",
            type=['csv'],
            help="S√©lectionnez le fichier CSV √† importer dans MongoDB"
        )
        
        if uploaded_file is not None:
            # Aper√ßu du fichier
            try:
                df_preview = pd.read_csv(uploaded_file, nrows=5)
                st.success(f"‚úÖ Fichier charg√©: {uploaded_file.name}")
                st.info(f"üìä Aper√ßu: {len(df_preview)} lignes (preview), {len(df_preview.columns)} colonnes")
                
                # Afficher l'aper√ßu
                with st.expander("üëÄ Aper√ßu des donn√©es"):
                    st.dataframe(df_preview)
                
                # Reset file pointer for actual processing
                uploaded_file.seek(0)
                
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la lecture du fichier: {str(e)}")
                uploaded_file = None
        
        # Options d'import
        st.subheader("‚öôÔ∏è Options d'import")
        
        col1, col2 = st.columns(2)
        
        with col1:
            clear_collection = st.checkbox(
                "üóëÔ∏è Vider la collection avant l'import",
                value=False,
                help="Attention: Cette option supprimera tous les documents existants"
            )
        
        with col2:
            batch_size = st.number_input(
                "üì¶ Taille des lots",
                min_value=100,
                max_value=5000,
                value=1000,
                step=100,
                help="Nombre de documents √† ins√©rer par lot"
            )
        
        # Bouton d'import
        if st.button("üöÄ Lancer l'import", type="primary", disabled=uploaded_file is None):
            if uploaded_file is not None:
                with st.spinner("Import en cours... Veuillez patienter..."):
                    try:
                        # Pr√©parer les donn√©es pour l'API
                        files = {'file': (uploaded_file.name, uploaded_file.getvalue(), 'text/csv')}
                        data = {
                            'connection_string': connection_string,
                            'database_name': database_name,
                            'collection_name': collection_name,
                            'clear_collection': clear_collection,
                            'batch_size': batch_size
                        }
                        
                        # Appel √† l'API d'import
                        response = requests.post(
                            f"{api_base_url}/mongodb/import-csv",
                            files=files,
                            data=data,
                            timeout=300  # 5 minutes timeout
                        )
                        
                        if response.status_code == 200:
                            result = response.json()
                            
                            # Afficher les r√©sultats
                            st.success("üéâ Import termin√©!")
                            
                            # M√©triques
                            col1, col2, col3, col4 = st.columns(4)
                            
                            with col1:
                                st.metric("üìä Total", result['total_records'])
                            with col2:
                                st.metric("‚úÖ Ins√©r√©s", result['inserted_records'])
                            with col3:
                                st.metric("‚ùå √âchecs", result['failed_records'])
                            with col4:
                                success_rate = (result['inserted_records'] / result['total_records'] * 100) if result['total_records'] > 0 else 0
                                st.metric("üìà Taux de succ√®s", f"{success_rate:.1f}%")
                            
                            # Statut d√©taill√©
                            if result['status'] == 'success':
                                st.success("‚úÖ Import r√©ussi √† 100%")
                            elif result['status'] == 'partial_success':
                                st.warning("‚ö†Ô∏è Import partiellement r√©ussi")
                            else:
                                st.error("‚ùå Import √©chou√©")
                            
                            # Erreurs s'il y en a
                            if result['errors']:
                                with st.expander("‚ö†Ô∏è Erreurs d√©tect√©es"):
                                    for error in result['errors']:
                                        st.error(error)
                            
                            # Donn√©es d'exemple
                            if result['sample_data']:
                                with st.expander("üîç Aper√ßu des donn√©es import√©es"):
                                    st.json(result['sample_data'])
                        
                        else:
                            st.error(f"‚ùå Erreur d'import: {response.status_code}")
                            st.error(response.text)
                            
                    except requests.exceptions.Timeout:
                        st.error("‚è∞ Timeout: L'import prend trop de temps. V√©rifiez votre connexion.")
                    except requests.exceptions.RequestException as e:
                        st.error(f"‚ùå Erreur de requ√™te: {str(e)}")
                    except Exception as e:
                        st.error(f"‚ùå Erreur inattendue: {str(e)}")
    
    # TAB 2: Validation CSV
    with tab2:
        st.subheader("üîç Validation de fichier CSV")
        
        validation_file = st.file_uploader(
            "Choisissez un fichier CSV √† valider",
            type=['csv'],
            key="validation_file",
            help="Validez la structure de votre CSV avant l'import"
        )
        
        if validation_file is not None:
            if st.button("üîç Valider le fichier", type="secondary"):
                with st.spinner("Validation en cours..."):
                    try:
                        files = {'file': (validation_file.name, validation_file.getvalue(), 'text/csv')}
                        
                        response = requests.post(
                            f"{api_base_url}/mongodb/validate-csv",
                            files=files,
                            timeout=30
                        )
                        
                        if response.status_code == 200:
                            result = response.json()
                            
                            st.success("‚úÖ Validation termin√©e!")
                            
                            # Informations g√©n√©rales
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("üìä Colonnes", result['total_columns'])
                            with col2:
                                st.metric("üìã Lignes (sample)", result['sample_rows'])
                            with col3:
                                st.metric("üìÅ Fichier", result['filename'])
                            
                            # Colonnes d√©tect√©es
                            with st.expander("üìã Colonnes d√©tect√©es"):
                                for i, col in enumerate(result['columns'], 1):
                                    col_type = result['column_types'].get(col, 'Unknown')
                                    missing = result['missing_values'].get(col, 0)
                                    st.write(f"{i}. **{col}** ({col_type}) - {missing} valeurs manquantes")
                            
                            # Recommandations
                            if result['recommendations']:
                                st.subheader("üí° Recommandations")
                                for rec in result['recommendations']:
                                    st.warning(f"‚ö†Ô∏è {rec}")
                            else:
                                st.success("‚úÖ Aucun probl√®me d√©tect√©!")
                            
                            # Aper√ßu des donn√©es
                            if result['sample_data']:
                                with st.expander("üëÄ Aper√ßu des donn√©es"):
                                    df_sample = pd.DataFrame(result['sample_data'])
                                    st.dataframe(df_sample)
                        
                        else:
                            st.error(f"‚ùå Erreur de validation: {response.status_code}")
                            st.error(response.text)
                            
                    except requests.exceptions.RequestException as e:
                        st.error(f"‚ùå Erreur de requ√™te: {str(e)}")
                    except Exception as e:
                        st.error(f"‚ùå Erreur inattendue: {str(e)}")
    
    # TAB 3: Template CSV
    with tab3:
        st.subheader("üìã Template CSV")
        st.info("üí° T√©l√©chargez un template CSV avec les colonnes recommand√©es pour votre import.")
        
        if st.button("üì• T√©l√©charger le template", type="secondary"):
            try:
                response = requests.get(
                    f"{api_base_url}/mongodb/import-template",
                    timeout=30
                )
                
                if response.status_code == 200:
                    # Cr√©er un lien de t√©l√©chargement
                    csv_content = response.content
                    
                    st.download_button(
                        label="üíæ T√©l√©charger products_template.csv",
                        data=csv_content,
                        file_name="products_template.csv",
                        mime="text/csv",
                        type="primary"
                    )
                    
                    st.success("‚úÖ Template pr√™t √† t√©l√©charger!")
                    
                    # Afficher un aper√ßu du template
                    try:
                        df_template = pd.read_csv(io.StringIO(csv_content.decode('utf-8')))
                        with st.expander("üëÄ Aper√ßu du template"):
                            st.dataframe(df_template)
                            
                            st.subheader("üìã Description des colonnes")
                            column_descriptions = {
                                'title': 'Nom du produit',
                                'vendor': 'Nom du vendeur/marque',
                                'price': 'Prix du produit (num√©rique)',
                                'compare_at_price': 'Prix de comparaison (optionnel)',
                                'available': 'Disponibilit√© (true/false)',
                                'stock_quantity': 'Quantit√© en stock (num√©rique)',
                                'store_domain': 'Domaine du magasin',
                                'store_region': 'R√©gion du magasin',
                                'platform': 'Plateforme e-commerce',
                                'tags': 'Tags s√©par√©s par des virgules',
                                'created_at': 'Date de cr√©ation (YYYY-MM-DD)'
                            }
                            
                            for col, desc in column_descriptions.items():
                                st.write(f"‚Ä¢ **{col}**: {desc}")
                    
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Impossible d'afficher l'aper√ßu: {str(e)}")
                
                else:
                    st.error(f"‚ùå Erreur lors du t√©l√©chargement: {response.status_code}")
                    st.error(response.text)
                    
            except requests.exceptions.RequestException as e:
                st.error(f"‚ùå Erreur de requ√™te: {str(e)}")
            except Exception as e:
                st.error(f"‚ùå Erreur inattendue: {str(e)}")
    
    # Section d'aide
    st.markdown("---")
    st.header("üìö Aide et Documentation")
    
    with st.expander("üîß Configuration requise"):
        st.markdown("""
        **Pr√©requis:**
        - API FastAPI en cours d'ex√©cution
        - MongoDB accessible
        - Fichier CSV correctement format√©
        
        **Colonnes recommand√©es:**
        - `title`: Nom du produit (obligatoire)
        - `vendor`: Vendeur/marque
        - `price`: Prix (num√©rique)
        - `available`: Disponibilit√© (boolean)
        - `stock_quantity`: Stock (num√©rique)
        - `store_domain`: Domaine du magasin
        - `platform`: Plateforme e-commerce
        """)
    
    with st.expander("‚ö†Ô∏è Conseils d'utilisation"):
        st.markdown("""
        **Bonnes pratiques:**
        1. **Validez** toujours votre CSV avant l'import
        2. **Testez** la connexion MongoDB avant l'import
        3. **Sauvegardez** vos donn√©es avant de vider une collection
        4. **Utilisez des lots** de taille raisonnable (1000-2000)
        5. **V√©rifiez** les formats de dates et prix
        
        **Formats support√©s:**
        - Dates: YYYY-MM-DD, DD/MM/YYYY
        - Prix: Nombres d√©cimaux (avec point)
        - Bool√©ens: true/false, 1/0, yes/no
        - Tags: S√©par√©s par des virgules
        """)
    
    with st.expander("üêõ R√©solution de probl√®mes"):
        st.markdown("""
        **Erreurs communes:**
        - **Timeout**: R√©duisez la taille des lots ou v√©rifiez la connexion
        - **Parsing Error**: V√©rifiez l'encodage et les s√©parateurs du CSV
        - **Connection Failed**: V√©rifiez l'URI MongoDB et les permissions
        - **Invalid Data**: Utilisez la validation pour identifier les probl√®mes
        
        **Solutions:**
        1. V√©rifiez les logs de l'API FastAPI
        2. Testez avec un fichier CSV plus petit
        3. Validez les formats de donn√©es
        4. V√©rifiez la connectivit√© r√©seau
        """)

# Exemple d'utilisation dans une app Streamlit principale
if __name__ == "__main__":
    st.set_page_config(
        page_title="Import CSV MongoDB",
        page_icon="üìä",
        layout="wide"
    )
    
    show_page()