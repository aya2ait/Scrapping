import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
import json
import sys
from pathlib import Path
import os
from typing import Dict, List, Any, Optional

# LangChain imports for complex LLM orchestration and conversational interface
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain_groq import ChatGroq
from langchain_core.messages import HumanMessage, AIMessage

# Import du ProductAnalyzer
try:
    # Adjust this import based on where ProductAnalyzer is truly located
    # For this example, assuming 'paste.py' is in the same directory or on PYTHONPATH
    from paste import ProductAnalyzer
    ANALYZER_AVAILABLE = True
except ImportError:
    ANALYZER_AVAILABLE = False

class BuyerLLMAnalyzer:
    """
    Analyseur LLM pour acheteurs utilisant Groq, avec orchestration LangChain.
    Permet une **orchestration complexe d'appels LLM**, un **cha√Ænage de t√¢ches**
    et une **interface conversationnelle** pour un chat interactif.
    """

    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv("GROQ_API_KEY")
        if not self.api_key:
            raise ValueError("Cl√© API Groq manquante. D√©finissez GROQ_API_KEY dans les variables d'environnement.")

        # Initialisation du mod√®le Groq via LangChain
        self.llm = ChatGroq(api_key=self.api_key, model="llama-3.3-70b-versatile", temperature=0.3)
        self.output_parser = StrOutputParser()

    def _prepare_buyer_context(self, data: Dict, analysis_type: str) -> str:
        """Pr√©pare le contexte des donn√©es pour l'acheteur"""

        context_parts = []

        # Statistiques pour l'acheteur
        if 'statistics' in data:
            stats = data['statistics']
            context_parts.append(f"""
Options d'achat disponibles:
- Produits analys√©s: {data.get('total_products', 'N/A')}
- Score moyen de qualit√©: {stats.get('average_score', 'N/A')}
- Prix le plus bas: {stats.get('price_range', {}).get('min', 'N/A')}‚Ç¨
- Prix le plus √©lev√©: {stats.get('price_range', {}).get('max', 'N/A')}‚Ç¨
- Prix moyen du march√©: {stats.get('price_range', {}).get('avg', 'N/A')}‚Ç¨
- Pourcentage de produits en stock: {stats.get('availability_rate', 'N/A')}%
            """)

        # Meilleures options d'achat
        if 'top_k_products' in data:
            top_products = data['top_k_products'][:10]
            context_parts.append("\nMeilleurs choix d'achat (Top 10):")

            for i, product in enumerate(top_products, 1):
                availability_status = "‚úÖ En stock" if product.get('available') else "‚ùå Rupture de stock"
                stock_info = f" (Stock: {product.get('stock_quantity', 'N/A')})" if product.get('stock_quantity') else ""

                context_parts.append(f"""
{i}. {product.get('title', 'N/A')}
   - Vendeur: {product.get('vendor', 'N/A')}
   - Prix: {product.get('price', 'N/A')}‚Ç¨
   - Score qualit√©: {product.get('synthetic_score', 'N/A')}/1.0
   - Disponibilit√©: {availability_status}{stock_info}
   - Plateforme: {product.get('platform', 'N/A')}
   - R√©gion: {product.get('store_region', 'N/A')}
                """)

        # Analyse par r√©gion (utile pour les frais de port)
        if 'geographical_analysis' in data and data['geographical_analysis']:
            geo_data = data['geographical_analysis']
            context_parts.append(f"\nDisponibilit√© par r√©gion: {list(geo_data.keys())}")

        # Analyse des vendeurs (fiabilit√©)
        if 'shops_analysis' in data and data['shops_analysis']:
            shops_data = data['shops_analysis']
            if 'top_shops' in shops_data:
                context_parts.append(f"\nVendeurs recommand√©s: {list(shops_data['top_shops'].keys())[:5]}")

        return "\n".join(context_parts)

    def _get_buyer_analysis_prompt_template(self, analysis_type: str) -> ChatPromptTemplate:
        """G√©n√®re le prompt LangChain selon le type d'analyse pour l'acheteur"""

        system_message_content = "Tu es un expert en conseil d'achat et comparaison de produits. Tu aides les clients √† faire les meilleurs choix d'achat en analysant les produits disponibles, leurs prix, leur qualit√© et leur rapport qualit√©-prix."

        base_template = """
Voici les produits disponibles √† l'achat:

{context}

"""
        if analysis_type == "general":
            user_message_content = base_template + """
En tant que conseiller d'achat, fournis une analyse compl√®te pour aider le client √† faire le meilleur choix:

1. **Recommandations d'achat prioritaires**: Quels sont les 3-5 meilleurs produits √† acheter et pourquoi?
2. **Rapport qualit√©-prix**: Quels produits offrent le meilleur rapport qualit√©-prix?
3. **Alertes importantes**: Y a-t-il des produits en rupture de stock ou √† acheter rapidement?
4. **Comparaison des prix**: Analyse des √©carts de prix et des bonnes affaires
5. **Vendeurs recommand√©s**: Quels vendeurs privil√©gier pour la fiabilit√©?
6. **Conseils d'achat**: Tips pratiques pour optimiser l'achat (timing, r√©gion, etc.)

Sois pratique, orient√© client et aide √† √©conomiser de l'argent tout en obtenant la meilleure qualit√©.
"""
        elif analysis_type == "budget":
            user_message_content = base_template + """
Analyse budget et √©conomies pour l'acheteur:

1. **Options √©conomiques**: Meilleurs produits dans chaque gamme de prix
2. **Bonnes affaires**: Produits avec le meilleur rapport qualit√©-prix
3. **Comparaison des prix**: √âcarts de prix entre vendeurs pour les m√™mes produits
4. **Timing d'achat**: Quand acheter pour √©conomiser (stock, promotions possibles)
5. **Budget recommand√©**: Quel budget pr√©voir pour un achat de qualit√©?
6. **Pi√®ges √† √©viter**: Prix trop bas suspects, vendeurs peu fiables

Focus sur l'optimisation du budget et les √©conomies possibles.
"""
        elif analysis_type == "quality":
            user_message_content = base_template + """
Analyse qualit√© et fiabilit√© pour l'acheteur:

1. **Produits premium**: Meilleurs produits en termes de qualit√© (scores √©lev√©s)
2. **Fiabilit√© des vendeurs**: Vendeurs les plus fiables et r√©put√©s
3. **Disponibilit√© et stock**: Produits garantis en stock vs risque de rupture
4. **Crit√®res de qualit√©**: Qu'est-ce qui rend ces produits meilleurs que d'autres?
5. **Investissement durable**: Produits qui valent l'investissement √† long terme
6. **Signaux d'alerte**: Produits ou vendeurs √† √©viter

Priorit√© √† la qualit√© et √† la fiabilit√© de l'achat.
"""
        elif analysis_type == "urgency":
            user_message_content = base_template + """
Analyse urgence et disponibilit√© pour l'acheteur:

1. **Achat imm√©diat**: Produits √† acheter maintenant (stock limit√©)
2. **Produits en tension**: Articles qui risquent la rupture de stock
3. **Alternatives disponibles**: Solutions de secours si produit principal indisponible
4. **D√©lais de livraison**: Estimation des d√©lais selon les r√©gions/vendeurs
5. **Stock monitoring**: Produits √† surveiller pour disponibilit√©
6. **Plan d'achat**: Strat√©gie d'achat selon l'urgence du besoin

Focus sur la disponibilit√© et l'urgence d'achat.
"""
        else:
            user_message_content = base_template + "Fournis des conseils d'achat personnalis√©s bas√©s sur ces donn√©es produits."

        return ChatPromptTemplate.from_messages([
            ("system", system_message_content),
            ("user", user_message_content)
        ])

    def analyze_for_buyer(self, products_data: Dict, analysis_type: str = "general") -> str:
        """
        Analyse des produits du point de vue d'un acheteur en utilisant LangChain.
        """
        context = self._prepare_buyer_context(products_data, analysis_type)
        prompt_template = self._get_buyer_analysis_prompt_template(analysis_type)

        # Cha√Æne LangChain pour l'analyse
        analysis_chain = (
            {"context": RunnablePassthrough()}
            | prompt_template
            | self.llm
            | self.output_parser
        )

        try:
            # Ex√©cution de la cha√Æne LangChain
            response_content = analysis_chain.invoke(context)
            return response_content
        except Exception as e:
            return f"Erreur lors de l'analyse LangChain: {str(e)}"

    def get_conversational_chain(self) -> Any:
        """
        Retourne une cha√Æne conversationnelle LangChain pour un chat interactif.
        """
        # Le prompt inclut un historique de messages pour le contexte conversationnel
        conversational_prompt = ChatPromptTemplate.from_messages([
            ("system", "Tu es un assistant d'achat intelligent. Tu r√©ponds aux questions des utilisateurs sur les produits, les prix et les meilleurs choix en te basant sur les donn√©es de produits que tu as re√ßues. Sois concis et utile."),
            MessagesPlaceholder(variable_name="chat_history"),
            ("user", "{question}"),
        ])

        # Cr√©ation de la cha√Æne conversationnelle
        conversational_chain = conversational_prompt | self.llm | self.output_parser
        return conversational_chain

def display_buyer_analysis_results(top_k_df, df_scored, ai_analysis, analysis_type, llm_data):
    """Affiche les r√©sultats de l'analyse pour l'acheteur"""

    # Analyse IA pour acheteur
    st.markdown("## üõí Conseil d'Achat IA")

    analysis_types_labels = {
        "general": "üéØ Recommandations G√©n√©rales",
        "budget": "üí∞ Optimisation Budget",
        "quality": "‚≠ê Analyse Qualit√©",
        "urgency": "‚ö° Urgence d'Achat"
    }

    st.markdown(f"### {analysis_types_labels.get(analysis_type, 'Conseil d\'Achat')}")

    # Afficher l'analyse dans un container stylis√©
    st.markdown(
        f"""
        <div style="background-color: #f0f8ff; padding: 20px; border-radius: 10px; border-left: 5px solid #FF6B35;">
        {ai_analysis.replace(chr(10), '<br>')}
        </div>
        """,
        unsafe_allow_html=True
    )

    # M√©triques acheteur
    st.markdown("## üìä Aper√ßu du March√©")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Options disponibles", len(top_k_df))

    with col2:
        if 'price' in top_k_df.columns:
            min_price = top_k_df['price'].min()
            st.metric("Prix minimum", f"{min_price:.2f}‚Ç¨")
        else:
            st.metric("Prix minimum", "N/A")

    with col3:
        if 'price' in top_k_df.columns:
            avg_price = top_k_df['price'].mean()
            st.metric("Prix moyen", f"{avg_price:.2f}‚Ç¨")
        else:
            st.metric("Prix moyen", "N/A")

    with col4:
        if 'available' in top_k_df.columns:
            availability = top_k_df['available'].mean() * 100
            st.metric("Produits en stock", f"{availability:.1f}%")
        else:
            st.metric("Disponibilit√©", "N/A")

    # Tableau des meilleures options d'achat
    st.markdown("## üèÜ Meilleures Options d'Achat")

    # Pr√©parer l'affichage orient√© acheteur
    display_df = top_k_df.copy()
    display_df['Rang'] = range(1, len(display_df) + 1)
    display_df['Score Qualit√©'] = display_df['synthetic_score'].round(3)

    if 'price' in display_df.columns:
        display_df['Prix'] = display_df['price'].apply(lambda x: f"{x:.2f}‚Ç¨")

    if 'available' in display_df.columns:
        display_df['Disponibilit√©'] = display_df['available'].apply(
            lambda x: "üü¢ En stock" if x else "üî¥ Rupture"
        )

    # Ajouter recommandation d'achat
    def get_recommendation(row):
        score = row['synthetic_score']
        available = row.get('available', False)

        if not available:
            return "‚è≥ Attendre"
        elif score >= 0.8:
            return "‚≠ê Excellent choix"
        elif score >= 0.6:
            return "üëç Bon choix"
        else:
            return "ü§î √Ä √©tudier"

    display_df['Recommandation'] = display_df.apply(get_recommendation, axis=1)

    # Colonnes √† afficher pour l'acheteur
    columns_to_show = ['Rang', 'title', 'vendor', 'Prix', 'Disponibilit√©', 'Score Qualit√©', 'Recommandation']

    if 'store_region' in display_df.columns:
        display_df['R√©gion'] = display_df['store_region']
        columns_to_show.append('R√©gion')

    column_names = {
        'title': 'Produit',
        'vendor': 'Vendeur'
    }

    st.dataframe(
        display_df[columns_to_show].rename(columns=column_names),
        use_container_width=True
    )

    # Graphiques orient√©s acheteur
    st.markdown("## üìà Analyse des Options")

    col1, col2 = st.columns(2)

    with col1:
        # Analyse prix vs qualit√©
        if 'price' in top_k_df.columns:
            fig_scatter = px.scatter(
                top_k_df,
                x='price',
                y='synthetic_score',
                size='stock_quantity' if 'stock_quantity' in top_k_df.columns else None,
                color='available' if 'available' in top_k_df.columns else None,
                title="Prix vs Qualit√© - Trouvez la Meilleure Affaire",
                labels={'price': 'Prix (‚Ç¨)', 'synthetic_score': 'Score Qualit√©'},
                hover_data=['title', 'vendor'],
                color_discrete_map={True: '#00CC96', False: '#FF6B6B'}
            )
            fig_scatter.add_shape(
                type="line",
                x0=top_k_df['price'].min(), y0=0.7,
                x1=top_k_df['price'].max(), y1=0.7,
                line=dict(color="orange", width=2, dash="dash"),
            )
            fig_scatter.add_annotation(
                x=top_k_df['price'].mean(), y=0.72,
                text="Seuil Qualit√© Recommand√©",
                showarrow=False,
                font=dict(color="orange")
            )
            st.plotly_chart(fig_scatter, use_container_width=True)

    with col2:
        # Distribution des prix
        fig_price_dist = px.histogram(
            top_k_df,
            x='price' if 'price' in top_k_df.columns else 'synthetic_score',
            title="Distribution des Prix du March√©",
            nbins=15,
            color_discrete_sequence=['#FF6B35']
        )

        if 'price' in top_k_df.columns:
            # Ajouter ligne prix moyen
            avg_price = top_k_df['price'].mean()
            fig_price_dist.add_vline(
                x=avg_price,
                line_dash="dash",
                line_color="red",
                annotation_text=f"Prix moyen: {avg_price:.2f}‚Ç¨"
            )

        fig_price_dist.update_layout(height=400)
        st.plotly_chart(fig_price_dist, use_container_width=True)

    # Analyse des vendeurs
    if 'vendor' in top_k_df.columns:
        vendor_analysis = top_k_df.groupby('vendor').agg({
            'synthetic_score': 'mean',
            'price': 'mean' if 'price' in top_k_df.columns else 'count',
            'available': 'mean' if 'available' in top_k_df.columns else 'count'
        }).round(3)

        fig_vendors = px.bar(
            vendor_analysis.reset_index(),
            x='vendor',
            y='synthetic_score',
            title="Scores Moyens par Vendeur",
            color='synthetic_score',
            color_continuous_scale='RdYlGn'
        )
        st.plotly_chart(fig_vendors, use_container_width=True)

    # Section conseils d'achat
    st.markdown("## üí° Conseils d'Achat Rapides")

    col1, col2, col3 = st.columns(3)

    with col1:
        # Meilleure affaire
        if not top_k_df.empty and 'price' in top_k_df.columns:
            # Avoid division by zero for synthetic_score or price
            best_value_products = top_k_df[top_k_df['synthetic_score'] > 0]
            if not best_value_products.empty:
                # Calculate ratio, handle division by zero for price
                best_value_products = best_value_products[best_value_products['price'] > 0]
                if not best_value_products.empty:
                    best_value = best_value_products.loc[(best_value_products['synthetic_score'] / best_value_products['price']).idxmax()]
                    st.success(f"üéØ **Meilleure affaire**: {best_value.iloc[0]['title'][:30]}... √† {best_value.iloc[0]['price']:.2f}‚Ç¨")
                else:
                    st.info("Aucune meilleure affaire trouv√©e (prix non positifs).")
            else:
                st.info("Aucune meilleure affaire trouv√©e (scores non positifs).")
        else:
            st.info("Aucune meilleure affaire trouv√©e (donn√©es insuffisantes).")

    with col2:
        # Alerte stock
        if 'available' in top_k_df.columns:
            low_stock = top_k_df[top_k_df['available'] == False]
            if not low_stock.empty:
                st.warning(f"‚ö†Ô∏è **{len(low_stock)} produits** en rupture de stock")
            else:
                st.info("‚úÖ Tous les produits sont disponibles")

    with col3:
        # Prix moyen gamme
        if 'price' in top_k_df.columns and not top_k_df.empty:
            price_ranges = pd.cut(top_k_df['price'], bins=3, labels=['Budget', 'Moyen', 'Premium'])
            most_common_range = price_ranges.value_counts().index[0]
            st.info(f"üìä **Gamme dominante**: {most_common_range}")
        else:
            st.info("N/A (Prix ou donn√©es manquantes)")

    # Export et actions
    st.markdown("## üíæ Sauvegarde et Partage")

    col1, col2, col3 = st.columns(3)

    with col1:
        # Export liste d'achat
        shopping_list = top_k_df[['title', 'vendor', 'price', 'available']].copy()
        shopping_list['√Ä acheter'] = shopping_list['available'].apply(lambda x: '‚úì' if x else '‚úó')
        csv_shopping = shopping_list.to_csv(index=False)

        st.download_button(
            "üõí Liste d'Achat CSV",
            csv_shopping,
            file_name=f"liste_achat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )

    with col2:
        # Export conseil d'achat
        buying_guide = f"""
Guide d'Achat Personnalis√© - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Type d'analyse: {analysis_type}

{ai_analysis}

R√©sum√© des options:
- Nombre de produits analys√©s: {len(top_k_df)}
- Prix moyen: {top_k_df['price'].mean():.2f}‚Ç¨ (si disponible)
- Score qualit√© moyen: {top_k_df['synthetic_score'].mean():.3f}
- Taux de disponibilit√©: {top_k_df['available'].mean()*100:.1f}%

Meilleur choix: {top_k_df.iloc[0]['title']}
Prix: {top_k_df.iloc[0]['price']:.2f}‚Ç¨
Vendeur: {top_k_df.iloc[0]['vendor']}
"""

        st.download_button(
            "üìã Guide d'Achat",
            buying_guide,
            file_name=f"guide_achat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain"
        )

    with col3:
        # Nouvelle recherche
        if st.button("üîÑ Nouvelle Recherche", use_container_width=True):
            st.session_state.clear() # Clear session state for a fresh start
            st.rerun()

    # Chat interactif
    st.markdown("## üí¨ Chat Interactif (LangChain)")
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "llm_analyzer_chat" not in st.session_state:
        st.session_state.llm_analyzer_chat = BuyerLLMAnalyzer(llm_data.get('api_key')) # Pass API key here
        st.session_state.conversational_chain = st.session_state.llm_analyzer_chat.get_conversational_chain()

    # Display chat messages from history on app rerun
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # React to user input
    if prompt := st.chat_input("Posez une question sur les produits..."):
        # Display user message in chat message container
        st.chat_message("user").markdown(prompt)
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})

        with st.spinner("L'IA est en train de r√©fl√©chir..."):
            try:
                # Prepare chat history for LangChain
                chat_history_lc = []
                for msg in st.session_state.messages[:-1]: # Exclude current user message
                    if msg["role"] == "user":
                        chat_history_lc.append(HumanMessage(content=msg["content"]))
                    elif msg["role"] == "assistant":
                        chat_history_lc.append(AIMessage(content=msg["content"]))

                # Invoke the conversational chain
                response = st.session_state.conversational_chain.invoke({
                    "question": prompt,
                    "chat_history": chat_history_lc
                })
                with st.chat_message("assistant"):
                    st.markdown(response)
                st.session_state.messages.append({"role": "assistant", "content": response})
            except Exception as e:
                st.error(f"Erreur lors du chat avec l'IA: {str(e)}")


def show_buyer_analysis_page():
    """Page d'analyse pour acheteurs - Trouvez les meilleurs produits √† acheter"""

    st.title("üõí Assistant d'Achat Intelligent")
    st.markdown("Trouvez les meilleurs produits √† acheter avec l'aide de l'IA")

    # V√©rifications pr√©alables
    if not ANALYZER_AVAILABLE:
        st.error("‚ùå ProductAnalyzer non disponible. Assurez-vous que le fichier 'paste.py' est accessible.")
        return

    # Configuration de l'API Groq
    with st.sidebar:
        st.markdown("### üîë Configuration")

        # Cl√© API
        groq_api_key = st.text_input(
            "Cl√© API Groq",
            type="password",
            value=os.getenv("GROQ_API_KEY", ""),
            help="Obtenez votre cl√© API sur https://console.groq.com/"
        )

        if groq_api_key:
            os.environ["GROQ_API_KEY"] = groq_api_key

        st.markdown("---")

        # Type d'analyse acheteur
        analysis_type = st.selectbox(
            "Type de conseil d'achat",
            ["general", "budget", "quality", "urgency"],
            format_func=lambda x: {
                "general": "üéØ Conseils g√©n√©raux",
                "budget": "üí∞ Optimisation budget",
                "quality": "‚≠ê Focus qualit√©",
                "urgency": "‚ö° Achat urgent"
            }[x]
        )

        st.markdown("---")

        # Pr√©f√©rences d'achat
        st.markdown("### üéØ Vos Pr√©f√©rences")

        # Budget maximum
        max_budget = st.number_input("Budget maximum (‚Ç¨)", min_value=0, value=500, step=10)

        # Nombre de produits √† analyser
        k = st.slider("Nombre de produits √† comparer", 5, 30, 15)

        # Priorit√©s personnelles
        st.markdown("#### Vos priorit√©s")
        price_importance = st.slider("Importance du prix", 0.0, 1.0, 0.4, 0.05)
        quality_importance = st.slider("Importance de la qualit√©", 0.0, 1.0, 0.35, 0.05)
        availability_importance = st.slider("Importance de la disponibilit√©", 0.0, 1.0, 0.25, 0.05)

    if not groq_api_key:
        st.warning("‚ö†Ô∏è Veuillez configurer votre cl√© API Groq dans la sidebar")
        return

    # Interface principal
    col1, col2 = st.columns([2, 1])

    with col2:
        # Configuration de recherche
        st.markdown("### üîç Crit√®res de Recherche")

        # R√©gion pr√©f√©r√©e
        preferred_region = st.selectbox(
            "R√©gion pr√©f√©r√©e",
            ["Toutes", "US", "EU", "CA", "AU"],
            index=0,
            help="Peut affecter les frais de port"
        )

        # Disponibilit√©
        stock_preference = st.radio(
            "Disponibilit√©",
            ["Tous les produits", "En stock seulement", "Stock √©lev√© seulement"],
            index=1
        )

        # Gamme de prix
        if max_budget > 0:
            price_range = st.slider(
                "Gamme de prix souhait√©e (‚Ç¨)",
                0, max_budget,
                (0, max_budget),
                step=5
            )
        else:
            price_range = (0, 1000)

    with col1:
        st.markdown("### üéØ Recherche de Produits")

        # Bouton de recherche
        if st.button("üîç Trouver les Meilleurs Produits", type="primary", use_container_width=True):

            with st.spinner("Recherche des meilleures options d'achat..."):
                try:
                    # Initialiser l'analyseur
                    analyzer = ProductAnalyzer()

                    if analyzer.client is None:
                        st.error("‚ùå Connexion base de donn√©es impossible")
                        return

                    # Construire les filtres
                    filters = {}

                    # Filtre de disponibilit√©
                    if stock_preference == "En stock seulement":
                        filters['available'] = True
                    elif stock_preference == "Stock √©lev√© seulement":
                        filters['stock_quantity'] = {"$gte": 10}
                        # If 'available' is also a filter, ensure it's True
                        if 'available' not in filters:
                            filters['available'] = True


                    # Filtre de r√©gion
                    if preferred_region != "Toutes":
                        filters['store_region'] = preferred_region

                    # Filtre de prix
                    if price_range[0] > 0 or price_range[1] < max_budget:
                        price_filter = {}
                        if price_range[0] > 0:
                            price_filter["$gte"] = price_range[0]
                        if price_range[1] < max_budget:
                            price_filter["$lte"] = price_range[1]
                        filters['price'] = price_filter

                    # Crit√®res orient√©s acheteur
                    criteria = {
                        'weights': {
                            'price': price_importance,
                            'availability': availability_importance,
                            'stock': 0.15,
                            'vendor_popularity': quality_importance * 0.3,
                            'recency': quality_importance * 0.2
                        },
                        'price_preference': 'low'  # Les acheteurs pr√©f√®rent les prix bas
                    }

                    # Obtenir les donn√©es
                    st.info("üìä Recherche de produits...")
                    df = analyzer.get_products_dataframe(filters)

                    if df.empty:
                        st.warning("Aucun produit trouv√© avec ces crit√®res. Essayez d'√©largir votre recherche.")
                        return

                    # Calculer les scores
                    st.info("üßÆ √âvaluation des options...")
                    df_scored = analyzer.calculate_synthetic_score(df, criteria)

                    # S√©lectionner les meilleures options
                    top_k_df = analyzer.get_top_k_products(df_scored, k, 'synthetic_score')

                    # Analyses suppl√©mentaires
                    geo_analysis = analyzer.analyze_by_geography(df_scored)
                    shops_analysis = analyzer.analyze_shops_ranking(df_scored)

                    # Pr√©parer les donn√©es pour l'analyse IA
                    llm_data = {
                        'total_products': len(df),
                        'k': k,
                        'budget': max_budget,
                        'top_k_products': [],
                        'statistics': {
                            'average_score': df_scored['synthetic_score'].mean(),
                            'score_std': df_scored['synthetic_score'].std(),
                            'price_range': {
                                'min': df_scored['price'].min() if 'price' in df_scored.columns else None,
                                'max': df_scored['price'].max() if 'price' in df_scored.columns else None,
                                'avg': df_scored['price'].mean() if 'price' in df_scored.columns else None
                            },
                            'availability_rate': df_scored['available'].mean() * 100 if 'available' in df_scored.columns else None
                        },
                        'geographical_analysis': geo_analysis,
                        'shops_analysis': shops_analysis,
                        'api_key': groq_api_key # Pass the API key to llm_data for the chat
                    }

                    # Convertir les meilleures options pour l'IA
                    for idx, row in top_k_df.iterrows():
                        product_data = {
                            'title': row.get('title', ''),
                            'vendor': row.get('vendor', ''),
                            'price': row.get('price', 0),
                            'synthetic_score': row.get('synthetic_score', 0),
                            'available': row.get('available', False),
                            'stock_quantity': row.get('stock_quantity', 0),
                            'platform': row.get('platform', ''),
                            'store_region': row.get('store_region', '')
                        }
                        llm_data['top_k_products'].append(product_data)

                    # Analyse IA pour l'acheteur
                    st.info("ü§ñ G√©n√©ration des conseils d'achat...")
                    llm_analyzer = BuyerLLMAnalyzer(groq_api_key)
                    ai_analysis = llm_analyzer.analyze_for_buyer(llm_data, analysis_type)

                    # Affichage des r√©sultats pour l'acheteur
                    display_buyer_analysis_results(top_k_df, df_scored, ai_analysis, analysis_type, llm_data)

                except Exception as e:
                    st.error(f"‚ùå Erreur lors de la recherche: {str(e)}")
                    st.exception(e)

# Fonction utilitaire pour l'utilisation externe
def run_buyer_analysis():
    """Point d'entr√©e pour l'analyse acheteur"""
    show_buyer_analysis_page()

if __name__ == "__main__":
    run_buyer_analysis()