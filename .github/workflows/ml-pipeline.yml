name: E-commerce ML Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_extraction:
        description: 'Skip data extraction step'
        required: false
        default: 'false'
        type: boolean
      skip_storage:
        description: 'Skip MongoDB storage step'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  MONGODB_VERSION: '5.0'

jobs:
  ml-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📋 Display system information
        run: |
          echo "🖥️ OS: $(lsb_release -d | cut -f2)"
          echo "Python: $(python --version)"
          echo "Disk: $(df -h . | awk 'NR==2 {print $4}')"
          echo "Memory: $(free -h | awk 'NR==2 {print $7}')"
          echo "Cores: $(nproc)"

      - name: 🌐 Install Chrome and ChromeDriver
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable chromium-chromedriver
          echo "PATH=$PATH:/usr/lib/chromium-browser/" >> $GITHUB_ENV

      - name: 📦 Create requirements.txt if missing
        run: |
          if [ ! -f requirements.txt ]; then
            cat > requirements.txt << EOF
          pandas>=1.5.0
          numpy>=1.21.0
          scikit-learn>=1.1.0
          xgboost>=1.6.0
          lightgbm>=3.3.0
          selenium>=4.0.0
          beautifulsoup4>=4.11.0
          requests>=2.28.0
          pymongo>=4.0.0
          mlflow>=2.0.0
          flask>=2.2.0
          matplotlib>=3.5.0
          seaborn>=0.11.0
          python-dateutil>=2.8.0
          pytz>=2022.1
          EOF
          fi
          cat requirements.txt

      - name: 🔧 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🗂️ Setup project directories
        run: |
          mkdir -p data mlruns logs
          ls -la

      - name: 🔗 Verify MongoDB connection
        run: |
          timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'
          python -c "
          from pymongo import MongoClient
          client = MongoClient('mongodb://localhost:27017/')
          client.admin.command('ping')
          print('✅ MongoDB is up!')
          "

      - name: 🚀 Execute ML Pipeline
        env:
          SKIP_EXTRACTION: ${{ github.event.inputs.skip_extraction || 'false' }}
          SKIP_STORAGE: ${{ github.event.inputs.skip_storage || 'false' }}
        run: |
          CMD="python orchestration.py --skip-api"
          if [ \"$SKIP_EXTRACTION\" = \"true\" ]; then CMD=\"$CMD --skip-extraction\"; fi
          if [ \"$SKIP_STORAGE\" = \"true\" ]; then CMD=\"$CMD --skip-storage\"; fi
          echo "Running: $CMD"
          timeout 30m $CMD 2>&1 | tee logs/pipeline_execution.log

      - name: 📊 Validate pipeline outputs
        run: |
          if [ -f data/unified_extracted_products.csv ]; then
            echo "✅ Data CSV found:"
            wc -l data/unified_extracted_products.csv
            head -5 data/unified_extracted_products.csv
          else
            echo "⚠️ No CSV file found"
          fi

      - name: 🧪 Test MongoDB data storage
        if: ${{ github.event.inputs.skip_storage != 'true' }}
        run: |
          python -c "
          from pymongo import MongoClient
          client = MongoClient('mongodb://localhost:27017/')
          count = client['products_db']['products'].count_documents({})
          print(f'✅ Products in DB: {count}')
          "

      - name: 📦 Upload Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logs-and-data
          path: |
            data/
            mlruns/
            logs/
          retention-days: 30

      - name: 📊 Summary Report
        if: always()
        run: |
          echo "# Pipeline Summary" > summary.md
          echo "- Run number: ${{ github.run_number }}" >> summary.md
          echo "- Branch: ${{ github.ref_name }}" >> summary.md
          echo "- Skip Extraction: ${{ github.event.inputs.skip_extraction }}" >> summary.md
          echo "- Skip Storage: ${{ github.event.inputs.skip_storage }}" >> summary.md
          echo "## Files" >> summary.md
          ls -lh data/ >> summary.md || echo "No data files found" >> summary.md
          cat summary.md

      - name: 📤 Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ github.run_number }}
          path: summary.md
          retention-days: 90

  notify:
    runs-on: ubuntu-latest
    needs: ml-pipeline
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - run: echo "📬 Notification step placeholder (e.g., Slack, Email, etc.)"
