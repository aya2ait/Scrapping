name: E-commerce ML Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_scraper:
        description: 'Skip data extraction step'
        required: false
        default: 'false'
        type: boolean
      skip_storage:
        description: 'Skip MongoDB storage step'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  MONGODB_VERSION: '5.0'
  DOCKERHUB_USERNAME: safaehm

jobs:
  ml-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📋 Display system information
        run: |
          echo "🖥️ OS: $(lsb_release -d | cut -f2)"
          echo "Python: $(python --version)"
          echo "Disk: $(df -h . | awk 'NR==2 {print $4}')"
          echo "Memory: $(free -h | awk 'NR==2 {print $7}')"
          echo "Cores: $(nproc)"

      - name: 📦 Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: 📋 Create requirements.txt
        run: |
          cat > requirements.txt << EOF
          flask>=2.0.0
          pymongo>=4.6.0
          pandas>=2.0.0
          numpy>=1.24.0
          scikit-learn>=1.3.0
          xgboost>=2.0.0
          lightgbm>=4.0.0
          requests>=2.28.0
          selenium>=4.10.0
          EOF
          cat requirements.txt

      - name: 🔧 Install Python dependencies for testing
        run: |
          python -m pip install --upgrade pip
          pip install pymongo

      - name: 🗂️ Setup project directories
        run: |
          mkdir -p data mlruns logs
          ls -la

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔗 Verify MongoDB connection
        run: |
          timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'
          python -c "
          from pymongo import MongoClient
          client = MongoClient('mongodb://localhost:27017/')
          client.admin.command('ping')
          print('✅ MongoDB is up!')
          "

      - name: 🚀 Run Pipeline with Docker Compose
        env:
          SKIP_SCRAPER: ${{ github.event.inputs.skip_scraper || 'false' }}
          SKIP_STORAGE: ${{ github.event.inputs.skip_storage || 'false' }}
        run: |
          # Create docker-compose-ci.yml for CI
          cat > docker-compose-ci.yml << EOF
          services:
            scraper:
              image: ${{ env.DOCKERHUB_USERNAME }}/ecommerce-scraper:latest
              volumes:
                - ./data:/app/data
                - ./logs:/app/logs
              networks:
                - ml-pipeline-network
              environment:
                - MONGO_URI=mongodb://localhost:27017/
              command: ["python3", "pipeline.py"]
            storage:
              image: ${{ env.DOCKERHUB_USERNAME }}/ecommerce-storage:latest
              depends_on:
                scraper:
                  condition: service_started
              volumes:
                - ./data:/app/data
              networks:
                - ml-pipeline-network
              environment:
                - MONGO_URI=mongodb://localhost:27017/
              command: ["python", "mongo.py", "/app/data/unified_extracted_products.csv"]
            api:
              image: ${{ env.DOCKERHUB_USERNAME }}/ecommerce-api:latest
              depends_on:
                storage:
                  condition: service_started
              ports:
                - "5000:5000"
              volumes:
                - ./data:/app/data
                - ./mlruns:/app/mlruns
              networks:
                - ml-pipeline-network
              environment:
                - MONGO_URI=mongodb://localhost:27017/
          networks:
            ml-pipeline-network:
              driver: bridge
          EOF
          # Run services conditionally
          if [ "$SKIP_SCRAPER" = "true" ]; then
            sed -i '/scraper:/,/command:/d' docker-compose-ci.yml
            sed -i '/scraper:/d' docker-compose-ci.yml
          fi
          if [ "$SKIP_STORAGE" = "true" ]; then
            sed -i '/storage:/,/command:/d' docker-compose-ci.yml
            sed -i '/storage:/d' docker-compose-ci.yml
          fi
          docker-compose -f docker-compose-ci.yml up -d
          sleep 60
          docker-compose -f docker-compose-ci.yml logs
          docker-compose -f docker-compose-ci.yml down

      - name: 📊 Validate pipeline outputs
        run: |
          if [ -f data/unified_extracted_products.csv ]; then
            echo "✅ Data CSV found:"
            wc -l data/unified_extracted_products.csv
            head -5 data/unified_extracted_products.csv
          else
            echo "⚠️ No CSV file found"
            exit 1
          fi

      - name: 🧪 Test MongoDB data storage
        if: ${{ github.event.inputs.skip_storage != 'true' }}
        run: |
          python -c "
          from pymongo import MongoClient
          client = MongoClient('mongodb://localhost:27017/')
          count = client['products_db']['products'].count_documents({})
          print(f'✅ Products in DB: {count}')
          if count == 0:
              print('❌ No products found in MongoDB')
              exit(1)
          "

      - name: 🧪 Test API endpoints
        run: |
          curl -f http://localhost:5000/health || { echo "❌ API health check failed"; exit 1; }
          curl -f http://localhost:5000/api/database-stats || { echo "❌ API database-stats failed"; exit 1; }

      - name: 🧪 Test LLM Enrichment
        if: ${{ github.event.inputs.skip_storage != 'true' }}
        run: |
          if [ -f llm_enrich.py ]; then
            docker run --network ml-pipeline-network ${{ env.DOCKERHUB_USERNAME }}/ecommerce-storage:latest python llm_enrich.py
          else
            echo "⚠️ llm_enrich.py not found, skipping LLM enrichment test"
          fi

      - name: 📦 Upload Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logs-and-data
          path: |
            data/
            mlruns/
            logs/
          retention-days: 30

      - name: 📊 Summary Report
        if: always()
        run: |
          echo "# Pipeline Summary" > summary.md
          echo "- Run number: ${{ github.run_number }}" >> summary.md
          echo "- Branch: ${{ github.ref_name }}" >> summary.md
          echo "- Skip Scraper: ${{ github.event.inputs.skip_scraper }}" >> summary.md
          echo "- Skip Storage: ${{ github.event.inputs.skip_storage }}" >> summary.md
          echo "## Files" >> summary.md
          ls -lh data/ >> summary.md || echo "No data files found" >> summary.md
          cat summary.md

      - name: 📤 Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ github.run_number }}
          path: summary.md
          retention-days: 90