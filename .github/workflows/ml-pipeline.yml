name: E-commerce ML Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_scraper:
        description: 'Skip data extraction step'
        required: false
        default: 'false'
        type: boolean
      skip_storage:
        description: 'Skip MongoDB storage step'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  DOCKERHUB_USERNAME: safaehm

jobs:
  ml-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Docker Compose and yq
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          sudo apt-get update
          sudo apt-get install -y jq
          sudo curl -L https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64 -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: 🔧 Install Python dependencies for testing
        run: |
          python -m pip install --upgrade pip
          pip install pymongo requests

      - name: 🗂️ Setup project directories
        run: |
          mkdir -p data mlruns logs
          ls -la

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🛠️ Build and push Docker images
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/ecommerce-scraper:latest -f Dockerfile.pipelinee .
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/ecommerce-storage:latest -f Dockerfile.mongo .
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/ecommerce-api:latest -f Dockerfile.api .
          docker push ${{ env.DOCKERHUB_USERNAME }}/ecommerce-scraper:latest
          docker push ${{ env.DOCKERHUB_USERNAME }}/ecommerce-storage:latest
          docker push ${{ env.DOCKERHUB_USERNAME }}/ecommerce-api:latest

      - name: 🚀 Start MongoDB with Docker Compose
        env:
          SKIP_SCRAPER: ${{ github.event.inputs.skip_scraper || 'false' }}
          SKIP_STORAGE: ${{ github.event.inputs.skip_storage || 'false' }}
        run: |
          # Copy docker-compose.yml and modify based on inputs
          cp docker-compose.yml docker-compose-ci.yml
          if [ "$SKIP_SCRAPER" = "true" ]; then
            yq eval 'del(.services.scraper)' -i docker-compose-ci.yml
          fi
          if [ "$SKIP_STORAGE" = "true" ]; then
            yq eval 'del(.services.storage)' -i docker-compose-ci.yml
          fi
          cat docker-compose-ci.yml
          # Start only MongoDB
          docker-compose -f docker-compose-ci.yml up -d mongodb
          # Wait for MongoDB to be healthy
          timeout 60 bash -c 'until docker-compose -f docker-compose-ci.yml ps mongodb | grep "healthy"; do sleep 1; done' || { echo "❌ MongoDB failed to start"; exit 1; }
          # Verify MongoDB connection
          docker-compose -f docker-compose-ci.yml exec -T mongodb mongosh --eval 'db.adminCommand("ping")' || { echo "❌ MongoDB ping failed"; exit 1; }
          echo "✅ MongoDB is up!"

      - name: 🚀 Run Remaining Pipeline Services
        env:
          SKIP_SCRAPER: ${{ github.event.inputs.skip_scraper || 'false' }}
          SKIP_STORAGE: ${{ github.event.inputs.skip_storage || 'false' }}
        run: |
          # Start remaining services
          docker-compose -f docker-compose-ci.yml up -d
          # Wait for services to complete (max 10 minutes)
          timeout 600 docker-compose -f docker-compose-ci.yml logs --tail=100 -f || true
          docker-compose -f docker-compose-ci.yml down

      - name: 🕵️ Debug MongoDB Contents
        if: ${{ github.event.inputs.skip_storage != 'true' }}
        run: |
          docker-compose -f docker-compose-ci.yml up -d mongodb
          python -c "
          from pymongo import MongoClient
          client = MongoClient('mongodb://localhost:27017/')
          db = client['products_db']
          count = db['products'].count_documents({})
          print(f'Products count: {count}')
          if count > 0:
              sample = db['products'].find_one()
              print(f'Sample document: {sample}')
          else:
              print('No products found')
              exit(1)
          "
          docker-compose -f docker-compose-ci.yml down

      - name: 📊 Validate pipeline outputs
        if: ${{ github.event.inputs.skip_scraper != 'true' }}
        run: |
          if [ -f data/unified_extracted_products.csv ]; then
            echo "✅ Data CSV found:"
            wc -l data/unified_extracted_products.csv
            head -n 5 data/unified_extracted_products.csv
            lines=$(wc -l < data/unified_extracted_products.csv)
            if [ "$lines" -ge 38500 ] && [ "$lines" -le 38510 ]; then
              echo "✅ Expected ~38503 products"
            else
              echo "❌ Unexpected CSV size: $lines"
              exit 1
            fi
          else
            echo "❌ No CSV file found"
            exit 1
          fi

      - name: 🧪 Test MongoDB data storage
        if: ${{ github.event.inputs.skip_storage != 'true' }}
        run: |
          docker-compose -f docker-compose-ci.yml up -d mongodb
          python -c "
          from pymongo import MongoClient
          client = MongoClient('mongodb://localhost:27017/')
          count = client['products_db']['products'].count_documents({})
          print(f'✅ Products in DB: {count}')
          if count < 38500 or count > 38510:
              print(f'❌ Expected ~38503 products in MongoDB, got {count}')
              exit(1)
          "
          docker-compose -f docker-compose-ci.yml down

      - name: 🧪 Test API endpoints
        if: ${{ github.event.inputs.skip_storage != 'true' }}
        run: |
          docker-compose -f docker-compose-ci.yml up -d
          timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 1; done' || { echo "❌ API health check failed"; exit 1; }
          curl -f http://localhost:5000/api/database-stats || { echo "❌ API database-stats failed"; exit 1; }
          curl -f -X POST http://localhost:5000/api/top-k-products -H "Content-Type: application/json" -d '{"k": 5, "criteria": "price"}' || { echo "❌ API top-k-products failed"; exit 1; }
          docker-compose -f docker-compose-ci.yml down

      - name: 📦 Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-and-data
          path: |
            data/
            mlruns/
            logs/
          retention-days: 30

      - name: 📊 Summary Report
        if: always()
        run: |
          echo "# Pipeline Summary" > summary.md
          echo "- Run number: ${{ github.run_number }}" >> summary.md
          echo "- Branch: ${{ github.ref_name }}" >> summary.md
          echo "- Skip Scraper: ${{ github.event.inputs.skip_scraper }}" >> summary.md
          echo "- Skip Storage: ${{ github.event.inputs.skip_storage }}" >> summary.md
          echo "## Files" >> summary.md
          ls -lh data/ >> summary.md || echo "No data files found" >> summary.md
          cat summary.md

      - name: 📤 Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ github.run_number }}
          path: summary.md
          retention-days: 90