# PIPELINE DEFINITION
# Name: base64-ecommerce-pipeline
# Description: E-commerce pipeline with base64 encoded parameters
components:
  comp-ml-scoring-component:
    executorLabel: exec-ml-scoring-component
    inputDefinitions:
      parameters:
        ml_config_b64:
          parameterType: STRING
        stored_data:
          parameterType: STRING
        stored_products:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      artifacts:
        ml_metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        scored_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        trained_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_accuracy:
          parameterType: NUMBER_DOUBLE
        top_k_count:
          parameterType: NUMBER_INTEGER
deploymentSpec:
  executors:
    exec-ml-scoring-component:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - ml_scoring_component
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef ml_scoring_component(\n    stored_data: str,\n    stored_products:\
          \ int,\n    ml_config_b64: str,\n    trained_model: Output[Model],\n   \
          \ scored_data: Output[Dataset],\n    ml_metrics: Output[Metrics]\n) -> NamedTuple('MLOutput',\
          \ [('model_accuracy', float), ('top_k_count', int)]):\n    \"\"\"\n    ML\
          \ Scoring component with base64 encoded config\n    \"\"\"\n    import json\n\
          \    import pandas as pd\n    import numpy as np\n    import joblib\n  \
          \  import os\n    import base64\n    from sklearn.ensemble import RandomForestRegressor\n\
          \    from sklearn.model_selection import train_test_split\n    from sklearn.metrics\
          \ import mean_squared_error, r2_score\n    from collections import namedtuple\n\
          \n    print(\"\U0001F9E0 Starting ML scoring...\")\n\n    # Decode base64\
          \ config\n    config = json.loads(base64.b64decode(ml_config_b64).decode())\n\
          \    print(f\"Decoded config: {config}\")\n\n    # Create dummy data for\
          \ demonstration\n    np.random.seed(42)\n    n_samples = 100\n    df = pd.DataFrame({\n\
          \        'feature1': np.random.rand(n_samples),\n        'feature2': np.random.rand(n_samples),\n\
          \        'target': np.random.rand(n_samples)\n    })\n\n    # Train a simple\
          \ model\n    X = df[['feature1', 'feature2']]\n    y = df['target']\n  \
          \  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\
          \n    model = RandomForestRegressor(n_estimators=config.get('n_estimators',\
          \ 100))\n    model.fit(X_train, y_train)\n\n    # Score the model\n    y_pred\
          \ = model.predict(X_test)\n    accuracy = r2_score(y_test, y_pred)\n\n \
          \   # Save model\n    joblib.dump(model, trained_model.path)\n\n    # Save\
          \ scored data\n    df['score'] = model.predict(X)\n    k = config.get('top_k',\
          \ 10)\n    top_k = df.nlargest(k, 'score')\n    top_k.to_csv(scored_data.path,\
          \ index=False)\n\n    # Save metrics\n    with open(ml_metrics.path, 'w')\
          \ as f:\n        json.dump({\n            'accuracy': float(accuracy),\n\
          \            'mse': float(mean_squared_error(y_test, y_pred)),\n       \
          \     'top_k': k\n        }, f)\n\n    print(f\"\u2705 ML scoring completed:\
          \ Top-{k} items selected\")\n    print(f\"\U0001F4C8 Model accuracy: {accuracy:.3f}\"\
          )\n\n    MLOutput = namedtuple('MLOutput', ['model_accuracy', 'top_k_count'])\n\
          \    return MLOutput(float(accuracy), k)\n\n"
        image: python:3.9-slim
pipelineInfo:
  description: E-commerce pipeline with base64 encoded parameters
  name: base64-ecommerce-pipeline
root:
  dag:
    tasks:
      ml-scoring-component:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-ml-scoring-component
        inputs:
          parameters:
            ml_config_b64:
              runtimeValue:
                constant: eyJtb2RlbF90eXBlIjogInJhbmRvbV9mb3Jlc3QiLCAibl9lc3RpbWF0b3JzIjogMTAwLCAidG9wX2siOiAxMCwgIndlaWdodHMiOiB7InByaWNlIjogMC4zLCAiYXZhaWxhYmlsaXR5IjogMC4yNSwgInN0b2NrIjogMC4yfX0=
            stored_data:
              runtimeValue:
                constant: dummy_data
            stored_products:
              runtimeValue:
                constant: 100.0
        taskInfo:
          name: ml-scoring-component
schemaVersion: 2.1.0
sdkVersion: kfp-2.13.0
